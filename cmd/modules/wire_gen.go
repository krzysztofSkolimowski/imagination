// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package modules

import (
	"github.com/google/go-cloud/wire"
	"github.com/krzysztofSkolimowski/imagination/pkg/app/image"
	"github.com/krzysztofSkolimowski/imagination/pkg/infrastructure/files"
	"github.com/sirupsen/logrus"
)

// Injectors from wire.go:

func SetupServices(uploadsDir files.UploadsDir, baseURL files.BaseURL, validators []files.Validator, region files.AWSRegion, accessKeyID files.AWSAccessKeyID, secretAccessKey files.AWSSecretAccessKey, minioEnabled files.MinioEnabled, minioURL files.MinioURL, bucket files.Bucket, transforms []image.Transform, formats []image.Format) (*Services, error) {
	pathResolver, err := files.NewPathResolver(uploadsDir)
	if err != nil {
		return nil, err
	}
	urlResolver, err := files.NewURLResolver(baseURL)
	if err != nil {
		return nil, err
	}
	localFileService := files.NewLocalFileService(uploadsDir, validators)
	s3Config := files.NewS3Config(region, accessKeyID, secretAccessKey, minioEnabled, minioURL)
	session, err := files.NewAWSSession(s3Config)
	if err != nil {
		return nil, err
	}
	uploader := files.NewS3Uploader(session)
	s3 := files.NewS3Service(session)
	logger := logrus.New()
	s3FileService := files.NewS3FileService(uploader, s3, bucket, logger)
	service := image.NewService(pathResolver, urlResolver, localFileService, s3FileService, transforms, formats)
	services := NewServices(service, logger)
	return services, nil
}

// wire.go:

var providers = wire.NewSet(
	NewServices, logrus.New, image.NewService, files.NewPathResolver, wire.Bind(new(image.PathResolver), files.PathResolver{}), files.NewURLResolver, wire.Bind(new(image.URLResolver), files.URLResolver{}), files.NewLocalFileService, wire.Bind(new(image.LocalFileService), files.LocalFileService{}), files.NewS3FileService, wire.Bind(new(image.CloudStorage), files.S3FileService{}), files.NewS3Config, files.NewAWSSession, files.NewS3Uploader, files.NewS3Service,
)
